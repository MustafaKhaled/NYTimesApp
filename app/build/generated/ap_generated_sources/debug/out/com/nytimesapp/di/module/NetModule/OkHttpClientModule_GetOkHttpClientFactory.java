// Generated by Dagger (https://google.github.io/dagger).
package com.nytimesapp.di.module.NetModule;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

public final class OkHttpClientModule_GetOkHttpClientFactory implements Factory<OkHttpClient> {
  private final OkHttpClientModule module;

  private final Provider<Cache> cacheProvider;

  private final Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider;

  private final Provider<ApiKeyInterceptor> apiKeyInterceptorProvider;

  public OkHttpClientModule_GetOkHttpClientFactory(
      OkHttpClientModule module,
      Provider<Cache> cacheProvider,
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider,
      Provider<ApiKeyInterceptor> apiKeyInterceptorProvider) {
    this.module = module;
    this.cacheProvider = cacheProvider;
    this.httpLoggingInterceptorProvider = httpLoggingInterceptorProvider;
    this.apiKeyInterceptorProvider = apiKeyInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return proxyGetOkHttpClient(
        module,
        cacheProvider.get(),
        httpLoggingInterceptorProvider.get(),
        apiKeyInterceptorProvider.get());
  }

  public static OkHttpClientModule_GetOkHttpClientFactory create(
      OkHttpClientModule module,
      Provider<Cache> cacheProvider,
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider,
      Provider<ApiKeyInterceptor> apiKeyInterceptorProvider) {
    return new OkHttpClientModule_GetOkHttpClientFactory(
        module, cacheProvider, httpLoggingInterceptorProvider, apiKeyInterceptorProvider);
  }

  public static OkHttpClient proxyGetOkHttpClient(
      OkHttpClientModule instance,
      Cache cache,
      HttpLoggingInterceptor httpLoggingInterceptor,
      ApiKeyInterceptor apiKeyInterceptor) {
    return Preconditions.checkNotNull(
        instance.getOkHttpClient(cache, httpLoggingInterceptor, apiKeyInterceptor),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
