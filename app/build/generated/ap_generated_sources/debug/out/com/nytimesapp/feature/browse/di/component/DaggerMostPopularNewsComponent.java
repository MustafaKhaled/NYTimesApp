// Generated by Dagger (https://google.github.io/dagger).
package com.nytimesapp.feature.browse.di.component;

import androidx.lifecycle.ViewModel;
import com.nytimesapp.di.component.AppComponent;
import com.nytimesapp.di.module.multibinding.DaggerViewModelFactory;
import com.nytimesapp.di.module.multibinding.DaggerViewModelFactory_Factory;
import com.nytimesapp.feature.browse.data.remote.MostPopularNewsApiService;
import com.nytimesapp.feature.browse.data.repo.MostPopularNewsRepository;
import com.nytimesapp.feature.browse.data.repo.MostPopularNewsRepository_Factory;
import com.nytimesapp.feature.browse.di.modules.MostPopularNewsApiServiceModule;
import com.nytimesapp.feature.browse.di.modules.MostPopularNewsApiServiceModule_ProvidesMostPopularNewsApiServiceFactory;
import com.nytimesapp.feature.browse.ui.MostPopularNewsFragment;
import com.nytimesapp.feature.browse.ui.MostPopularNewsFragment_MembersInjector;
import com.nytimesapp.feature.browse.viewmodel.MostPopularNewsViewModel;
import com.nytimesapp.feature.browse.viewmodel.MostPopularNewsViewModel_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerMostPopularNewsComponent implements MostPopularNewsComponent {
  private Provider<Retrofit> exposeRetrofitProvider;

  private Provider<MostPopularNewsApiService> providesMostPopularNewsApiServiceProvider;

  private Provider<MostPopularNewsRepository> mostPopularNewsRepositoryProvider;

  private Provider<MostPopularNewsViewModel> mostPopularNewsViewModelProvider;

  private Provider<ViewModel> mostPopularProvider;

  private DaggerMostPopularNewsComponent(
      MostPopularNewsApiServiceModule mostPopularNewsApiServiceModuleParam,
      AppComponent appComponentParam) {

    initialize(mostPopularNewsApiServiceModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>>
      getMapOfClassOfAndProviderOfViewModel() {
    return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(
        MostPopularNewsViewModel.class, mostPopularProvider);
  }

  private DaggerViewModelFactory getDaggerViewModelFactory() {
    return DaggerViewModelFactory_Factory.newDaggerViewModelFactory(
        getMapOfClassOfAndProviderOfViewModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(
      final MostPopularNewsApiServiceModule mostPopularNewsApiServiceModuleParam,
      final AppComponent appComponentParam) {
    this.exposeRetrofitProvider =
        new com_nytimesapp_di_component_AppComponent_exposeRetrofit(appComponentParam);
    this.providesMostPopularNewsApiServiceProvider =
        DoubleCheck.provider(
            MostPopularNewsApiServiceModule_ProvidesMostPopularNewsApiServiceFactory.create(
                mostPopularNewsApiServiceModuleParam, exposeRetrofitProvider));
    this.mostPopularNewsRepositoryProvider =
        MostPopularNewsRepository_Factory.create(providesMostPopularNewsApiServiceProvider);
    this.mostPopularNewsViewModelProvider =
        MostPopularNewsViewModel_Factory.create(mostPopularNewsRepositoryProvider);
    this.mostPopularProvider = DoubleCheck.provider((Provider) mostPopularNewsViewModelProvider);
  }

  @Override
  public void inject(MostPopularNewsFragment fragment) {
    injectMostPopularNewsFragment(fragment);
  }

  private MostPopularNewsFragment injectMostPopularNewsFragment(MostPopularNewsFragment instance) {
    MostPopularNewsFragment_MembersInjector.injectFactory(instance, getDaggerViewModelFactory());
    return instance;
  }

  public static final class Builder {
    private MostPopularNewsApiServiceModule mostPopularNewsApiServiceModule;

    private AppComponent appComponent;

    private Builder() {}

    public Builder mostPopularNewsApiServiceModule(
        MostPopularNewsApiServiceModule mostPopularNewsApiServiceModule) {
      this.mostPopularNewsApiServiceModule =
          Preconditions.checkNotNull(mostPopularNewsApiServiceModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public MostPopularNewsComponent build() {
      if (mostPopularNewsApiServiceModule == null) {
        this.mostPopularNewsApiServiceModule = new MostPopularNewsApiServiceModule();
      }
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerMostPopularNewsComponent(mostPopularNewsApiServiceModule, appComponent);
    }
  }

  private static class com_nytimesapp_di_component_AppComponent_exposeRetrofit
      implements Provider<Retrofit> {
    private final AppComponent appComponent;

    com_nytimesapp_di_component_AppComponent_exposeRetrofit(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Retrofit get() {
      return Preconditions.checkNotNull(
          appComponent.exposeRetrofit(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
