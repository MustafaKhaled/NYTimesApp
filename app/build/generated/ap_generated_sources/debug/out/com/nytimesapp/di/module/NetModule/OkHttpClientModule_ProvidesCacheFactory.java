// Generated by Dagger (https://google.github.io/dagger).
package com.nytimesapp.di.module.NetModule;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.io.File;
import javax.inject.Provider;
import okhttp3.Cache;

public final class OkHttpClientModule_ProvidesCacheFactory implements Factory<Cache> {
  private final OkHttpClientModule module;

  private final Provider<File> cacheFileProvider;

  public OkHttpClientModule_ProvidesCacheFactory(
      OkHttpClientModule module, Provider<File> cacheFileProvider) {
    this.module = module;
    this.cacheFileProvider = cacheFileProvider;
  }

  @Override
  public Cache get() {
    return proxyProvidesCache(module, cacheFileProvider.get());
  }

  public static OkHttpClientModule_ProvidesCacheFactory create(
      OkHttpClientModule module, Provider<File> cacheFileProvider) {
    return new OkHttpClientModule_ProvidesCacheFactory(module, cacheFileProvider);
  }

  public static Cache proxyProvidesCache(OkHttpClientModule instance, File cacheFile) {
    return Preconditions.checkNotNull(
        instance.providesCache(cacheFile),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
