// Generated by Dagger (https://google.github.io/dagger).
package com.nytimesapp.di.module.NetModule;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import okhttp3.logging.HttpLoggingInterceptor;

public final class OkHttpClientModule_GetHttpLoggingInterceptorFactory
    implements Factory<HttpLoggingInterceptor> {
  private final OkHttpClientModule module;

  public OkHttpClientModule_GetHttpLoggingInterceptorFactory(OkHttpClientModule module) {
    this.module = module;
  }

  @Override
  public HttpLoggingInterceptor get() {
    return proxyGetHttpLoggingInterceptor(module);
  }

  public static OkHttpClientModule_GetHttpLoggingInterceptorFactory create(
      OkHttpClientModule module) {
    return new OkHttpClientModule_GetHttpLoggingInterceptorFactory(module);
  }

  public static HttpLoggingInterceptor proxyGetHttpLoggingInterceptor(OkHttpClientModule instance) {
    return Preconditions.checkNotNull(
        instance.getHttpLoggingInterceptor(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
